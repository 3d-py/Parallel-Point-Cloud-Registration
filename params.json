{
  "name": "Parallel point cloud registration",
  "tagline": "Hanzhou Lu, Yujie Wei  CMU 15-618 2016 Fall",
  "body": "### SUMMARY\r\nIn this project, we plan to parallelize the Iterative Closest Point (ICP) registration algorithm for point cloud processing system using the NVIDIA CUDA library.\r\n\r\n### ALGORITHM\r\nPoint Cloud Registration (PCR) plays an important role in computer vision since a well-aligned point cloud model is the bedrock for many subsequent applications such as Simultaneous Localization and Mapping (SLAM) in the robotics and autonomous cars domain or Automatic Building Information Modeling in the architectural industry. Nowadays, point clouds are usually gathered by multiple cameras or laser scanners with their own coordinate systems. The objective of Point Cloud Registration (PCR) is to search a transformation that could align a reading point cloud with a reference point cloud in a consistent coordinate system. The process of finding the transformation and the closest point involves lots of matrix operations that are usually independent of each other. Given the intermediate level of dependency and the huge size of the problem, exploiting the parallelism can be a good alternative to speed up the algorithm.\r\n\r\nThe objective of the algorithm can be formally expressed as follows:\r\n![](https://raw.githubusercontent.com/HanzhouLu/Parallel-Point-Cloud-Registration/master/website%20images/image0.png)\r\n\r\nwhere T is the transformation, P is the reading point cloud captured in the coordinate System A, and Q is the reference point cloud captured in the coordinate system B. The error is defined as the distance between each closest point pairs in different point clouds. \r\n\r\nThe generic algorithm (Besl, 1992) is shown below:\r\n![](https://raw.githubusercontent.com/HanzhouLu/Parallel-Point-Cloud-Registration/master/website%20images/image1.png)\r\nThe program will first apply filters to the point clouds to remove outliers, then start searching from the\r\ninitial transformation. In each iteration, the algorithm establishes the correspondence, creates point\r\npairs from the reading and reference, conducts transformation over the reading point cloud, and find\r\nthe transformation that minimizes the match error. The process will continue until the result converges\r\nor reaches the maximum number of iteration.\r\n\r\nA more recent implementation of ICP is shown below:\r\n![Figure 1 Generic Scheme for Registration Algorithms (Pomerleau, 2015)](https://raw.githubusercontent.com/HanzhouLu/Parallel-Point-Cloud-Registration/master/website%20images/image2.png)\r\n\r\n\r\n\r\n### THE CHALLENGE\r\nThe challenges of the project come from the problem size and the dependency of the transformation\r\nseries. A typical point cloud usually contains millions of points that may cause the cache performance to\r\nbe quite poor. Also, notice that the next transformation has to be calculated based on the previous\r\nresult that limits the level of parallelism. Nowadays, to make the algorithm more robust when dealing\r\nwith occlusions and outliers, some refined versions of ICP adopt different distance metrics and\r\nobjective functions that bring new challenges. Our goal is to develop a robust parallel implementation\r\nof ICP that could be extended in the future to handle unexpected changes.\r\n\r\nBesides, to accelerate the key computation process, the data structure should provide support for fast\r\nsearch and inference. According to S. Rusinkiewicz and M. Levoy (2001), k-d tree is a good candidate\r\nfor ICP. Therefore, the project will also involve parallelizing the algorithm using the k-d tree data\r\nstructure.\r\n\r\n### RESOURCE\r\nThe Point Cloud Library (n.d.) provides a CPU implementation of ICP based on their self-developed\r\npoint cloud format which can be a good sequential reference of our project. However, since our project\r\nmay run on different point cloud format, we’ll implement our own sequential version and parallelize it in\r\nCPU and CUDA.\r\n\r\n### GOALS AND DELIVERABLES\r\n\r\n**SEQUENTIAL SOLUTION**\r\n\r\nIn this phase, we are going to read papers and algorithm about an implementation of image registration.  And we will get it work as a sequential version on CPU.\r\n\r\n**PARALLEL SOLUTION ON CPU**\r\n\r\nIn this phase, we will do a high-level optimization on our sequential version including but not limited to parallelization over different blocks in a matrix, cache optimization, and independence exploitation.\r\n\r\n**PARALLEL SOLUTION ON NVIDIA GPU**\r\n\r\nIn this phase, we will do specific optimization such as vectorized operations, shared memory, and other available resources in CUDA to make our code run faster on NVIDIA GPUs. \r\n\r\n**3D MODEL VISUALIZATION**\r\n\r\nWe will provide a visualization of the aligned point cloud model to make the outcome understandable.\r\n\r\n**(OPTIONAL)COMBINE REGISTRATION WITH SEGMENTATION**\r\n\r\nAfter we accomplish goals above, we will try to do points segmentation which is partition points into different parts and label them. This part can also be speeded up by parallel programming.\r\n\r\n### PLATFORM CHOICE\r\nWe choose CUDA as our parallel library because shared memory space in NVIDIA GPUs can be used as a programmable cache. It allows us to cache specific data which is quite helpful while doing matrix calculation. For a specific problem like matrix multiplication, the support for programmable cache and vector intrinsic will allow us more space to perform delicate tuning and get better performance.\r\n\r\n### REFERENCE\r\nBesl, Paul J.; N.D. McKay (1992). \"A Method for Registration of 3-D Shapes\". IEEE Trans. on Pattern Analysis and Machine Intelligence. Los Alamitos, CA, USA: IEEE Computer Society. 14 (2): 239–256. doi:10.1109/34.121791\r\n\r\nPomerleau, François; Colas, Francis; Siegwart, Roland (2015). \"A Review of Point Cloud Registration Algorithms for Mobile Robotics\". Foundations and Trends in Robotics. 4 (1): 1–104. doi:10.1561/2300000035\r\n\r\nS. Rusinkiewicz and M. Levoy (2001), \"Efficient variants of the ICP algorithm,\" 3-D Digital Imaging and Modeling, 2001. Proceedings. Third International Conference on, Quebec City, Que., pp. 145-152. doi: 10.1109/IM.2001.924423\r\n\r\nPCL - Point Cloud Library (PCL). (n.d.). Retrieved October 31, 2016, from http://www.pointclouds.org/\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}